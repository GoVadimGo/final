# Пусть ваша программа запрашивает у пользователя обозначение ноты
# и показывает ее частоту согласно приведенной таблице. После этого вы
# можете доработать свою программу таким образом, чтобы она поддерживала
# все октавы, начиная от субконтроктавы (C0) до пятой октавы (C8).
# При расчетах лучше использовать отношения между одними и теми же нотами
# в соседствующих октавах. К примеру, частота любой ноты октавы n будет
# составлять ровно половину от частоты той же ноты октавы n + 1. Используя
# это соотношение, вы без труда сможете добавить в свою программу учет
# всех нот любой октавы без присутствия бесчисленных условных блоков.

frequency = ('261.63','293.66','329.63','349.23','392.00','440.00','493.88') # Создаем список с частотами.
notes = ('C','D','E','F','G','A','B') # Создаем список с нотами.

OKT = float(input('Введите октаву(от 0 до 8) : ')) # Просим ввести номер октавы
NOTE = input('Введите ноту : ') # Просим ввести ноту

if OKT in range(0,9) and NOTE in notes: # Если номер октавы от 0 до 8 и нота соответствует нотам из списка, идем дальше
    if NOTE in notes: # если введенная пользователем "Нота" будет в списке notes
       index = (notes.index(NOTE)) # создаем переменную index и приравниваем её к индексу нот из списка,тоесть
# index будет равен номеру положения C D E F G A B , нам надо получить номер буквы в списке, так как

    new_frequency = frequency[index] # номеры буков и номера расположения частот одинаковы, тоесть они можно сказать
# соответствуют .Создаем переменную new_frequency и приравниваем её значение из списка frequency под номером,
# что мы достали выше. И так как в списке значение под типом string,
    new_frequency = float(new_frequency) # меняем на float , что бы
    new_frequency /= (2**(4-OKT)) # сделать математические исчисления
    print(f'Частота {OKT:.0f} октавы ,ноты {NOTE} ,составляет {new_frequency} Герц.')
else:
    print('Вы ввели неправильные значения.')

